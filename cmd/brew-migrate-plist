#!/usr/bin/env python3

import json
import plistlib
import re
import textwrap
from pathlib import Path
from sys import stderr
from typing import NoReturn

PLIST_RE = re.compile(r"  def plist\s+<<\~EOS\s+(?P<plist>.*?)\s+EOS\s+end", re.DOTALL)
PLIST_OPTIONS_RE = re.compile(r"plist_options .*\n\n")


def fail(msg: str) -> NoReturn:
    print(f"Error: {msg}", file=stderr)
    exit(1)


def plist_to_service(plist: str) -> str:
    data = plistlib.loads(plist.encode())
    if "StartInterval" in data or "StartCalendarInterval" in data:
        fail("run_type not yet supported")
    service = {
        "run": data.get("Program") or data.get("ProgramArguments"),
        "keep_alive": data.get("KeepAlive"),
        "working_dir": data.get("WorkingDirectory"),
        "root_dir": data.get("RootDirectory"),
        "input_path": data.get("StandardInPath"),
        "log_path": data.get("StandardOutPath"),
        "error_log_path": data.get("StandardErrorPath"),
        "environment_variables": data.get("EnvironmentVariables"),
    }
    block = "service do\n"
    for k, v in service.items():
        if v is not None:
            block += f"  {k} {json.dumps(v)}\n"
    block += "end"
    return block


if __name__ == "__main__":
    from argparse import ArgumentParser

    parser = ArgumentParser(description="Migrate plist to a service")
    parser.add_argument("formula", help="formula to migrate")
    parser.add_argument("--print", action="store_true", help="Print to stdout")

    args = parser.parse_args()
    file = Path(
        f"/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/{args.formula}.rb"
    )

    try:
        contents = file.read_text()
    except FileNotFoundError:
        fail(f"Could not find {args.formula}")

    if not (match := PLIST_RE.search(contents)):
        fail("no plist found")

    service = plist_to_service(match.group("plist"))
    if not args.print:
        service = textwrap.indent(service, " " * 2).lstrip()
        contents = PLIST_RE.sub(service, contents, count=1)
        contents = PLIST_OPTIONS_RE.sub("", contents, count=1)
        file.write_text(contents)
    else:
        print(service)
